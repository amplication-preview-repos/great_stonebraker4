/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DogSitter as PrismaDogSitter,
  Review as PrismaReview,
  Booking as PrismaBooking,
} from "@prisma/client";

export class DogSitterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DogSitterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dogSitter.count(args);
  }

  async dogSitters(
    args: Prisma.DogSitterFindManyArgs
  ): Promise<PrismaDogSitter[]> {
    return this.prisma.dogSitter.findMany(args);
  }
  async dogSitter(
    args: Prisma.DogSitterFindUniqueArgs
  ): Promise<PrismaDogSitter | null> {
    return this.prisma.dogSitter.findUnique(args);
  }
  async createDogSitter(
    args: Prisma.DogSitterCreateArgs
  ): Promise<PrismaDogSitter> {
    return this.prisma.dogSitter.create(args);
  }
  async updateDogSitter(
    args: Prisma.DogSitterUpdateArgs
  ): Promise<PrismaDogSitter> {
    return this.prisma.dogSitter.update(args);
  }
  async deleteDogSitter(
    args: Prisma.DogSitterDeleteArgs
  ): Promise<PrismaDogSitter> {
    return this.prisma.dogSitter.delete(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.dogSitter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.dogSitter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }
}
