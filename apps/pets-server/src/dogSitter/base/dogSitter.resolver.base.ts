/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DogSitter } from "./DogSitter";
import { DogSitterCountArgs } from "./DogSitterCountArgs";
import { DogSitterFindManyArgs } from "./DogSitterFindManyArgs";
import { DogSitterFindUniqueArgs } from "./DogSitterFindUniqueArgs";
import { CreateDogSitterArgs } from "./CreateDogSitterArgs";
import { UpdateDogSitterArgs } from "./UpdateDogSitterArgs";
import { DeleteDogSitterArgs } from "./DeleteDogSitterArgs";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { DogSitterService } from "../dogSitter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DogSitter)
export class DogSitterResolverBase {
  constructor(
    protected readonly service: DogSitterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DogSitter",
    action: "read",
    possession: "any",
  })
  async _dogSittersMeta(
    @graphql.Args() args: DogSitterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DogSitter])
  @nestAccessControl.UseRoles({
    resource: "DogSitter",
    action: "read",
    possession: "any",
  })
  async dogSitters(
    @graphql.Args() args: DogSitterFindManyArgs
  ): Promise<DogSitter[]> {
    return this.service.dogSitters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DogSitter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DogSitter",
    action: "read",
    possession: "own",
  })
  async dogSitter(
    @graphql.Args() args: DogSitterFindUniqueArgs
  ): Promise<DogSitter | null> {
    const result = await this.service.dogSitter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DogSitter)
  @nestAccessControl.UseRoles({
    resource: "DogSitter",
    action: "create",
    possession: "any",
  })
  async createDogSitter(
    @graphql.Args() args: CreateDogSitterArgs
  ): Promise<DogSitter> {
    return await this.service.createDogSitter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DogSitter)
  @nestAccessControl.UseRoles({
    resource: "DogSitter",
    action: "update",
    possession: "any",
  })
  async updateDogSitter(
    @graphql.Args() args: UpdateDogSitterArgs
  ): Promise<DogSitter | null> {
    try {
      return await this.service.updateDogSitter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DogSitter)
  @nestAccessControl.UseRoles({
    resource: "DogSitter",
    action: "delete",
    possession: "any",
  })
  async deleteDogSitter(
    @graphql.Args() args: DeleteDogSitterArgs
  ): Promise<DogSitter | null> {
    try {
      return await this.service.deleteDogSitter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Review], { name: "reviews" })
  @nestAccessControl.UseRoles({
    resource: "Review",
    action: "read",
    possession: "any",
  })
  async findReviews(
    @graphql.Parent() parent: DogSitter,
    @graphql.Args() args: ReviewFindManyArgs
  ): Promise<Review[]> {
    const results = await this.service.findReviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  @nestAccessControl.UseRoles({
    resource: "Booking",
    action: "read",
    possession: "any",
  })
  async findBookings(
    @graphql.Parent() parent: DogSitter,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
